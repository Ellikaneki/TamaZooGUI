/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package it.iiscastelli.tama.ui;

import it.iiscastelli.tama.data.TamaZoo;
import it.iiscastelli.tama.data.io.Slot;
import it.iiscastelli.tama.data.io.SlotPartita;
import it.iiscastelli.tama.data.io.SlotVuoto;
import it.iiscastelli.tama.data.save.Operazione;
import static it.iiscastelli.tama.data.save.Operazione.CARICAMENTO;
import static it.iiscastelli.tama.data.save.Operazione.SALVATAGGIO;
import it.iiscastelli.tama.ui.custom.Colore;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import javax.swing.BorderFactory;
import javax.swing.JPanel;

/**
 *
 * @author Ely
 */
public class FinestraSalvataggi extends javax.swing.JDialog {

    private TamaZoo zoo;
    private JPanel[] pannelli;
    private Slot[] slots;
    private FinestraMenu padre;
    private FinestraGioco gioco;
    private int indiceSelezionato;
    private Operazione operazione;

    /**
     * Creates new form FinestraSalvataggi
     */
    public FinestraSalvataggi(java.awt.Frame parent, boolean modal, Operazione operazione) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        gioco = (FinestraGioco) parent;
        this.operazione = operazione;
        inizializza();
    }

    private void inizializza() {
        pannelli = new JPanel[]{
            slot1, slot2, slot3, slot4
        };
        String testoConferma = switch (operazione) {
            case SALVATAGGIO ->
                "Salva";
            case CARICAMENTO ->
                "Carica";
        };
        btnConferma.setText(testoConferma);
    }

    public void setZoo(TamaZoo zoo) {
        this.zoo = zoo;
    }

    public void setSlots(Slot[] slots) {
        this.slots = slots;
        aggiornaUI();
    }

    public void setPadre(FinestraMenu finestra) {
        padre = finestra;
    }

    private void aggiornaUI() {
        for (int i = 0; i < pannelli.length; i++) {
            JPanel pannello = pannelli[i];
            pannello.removeAll();
            Slot slot = slots[i];
            if (slot instanceof SlotPartita slotPartita) {
                PanelSlotPartita pannelloSlot = new PanelSlotPartita(slotPartita);
                pannello.setBackground(pannelloSlot.getBackground());
                pannello.add(pannelloSlot);
            } else {
                PanelSlotVuoto pannelloSlot = new PanelSlotVuoto(slot.getNumero());
                pannello.setBackground(pannelloSlot.getBackground());
                pannello.add(pannelloSlot);
            }
        }
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sfondo = new javax.swing.JPanel();
        griglia = new javax.swing.JPanel();
        slot1 = new javax.swing.JPanel();
        slot2 = new javax.swing.JPanel();
        slot3 = new javax.swing.JPanel();
        slot4 = new javax.swing.JPanel();
        btnIndietro = new javax.swing.JButton();
        btnConferma = new javax.swing.JButton();
        btnElimina = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Salvataggi");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        sfondo.setBackground(new java.awt.Color(255, 255, 255));

        griglia.setBackground(new java.awt.Color(255, 255, 255));
        griglia.setLayout(new java.awt.GridBagLayout());

        slot1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slot1.setPreferredSize(new java.awt.Dimension(232, 94));
        slot1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slotMouseReleased(evt);
            }
        });
        slot1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 20);
        griglia.add(slot1, gridBagConstraints);

        slot2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slot2.setPreferredSize(new java.awt.Dimension(232, 94));
        slot2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slotMouseReleased(evt);
            }
        });
        slot2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        griglia.add(slot2, gridBagConstraints);

        slot3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slot3.setPreferredSize(new java.awt.Dimension(232, 94));
        slot3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slotMouseReleased(evt);
            }
        });
        slot3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        griglia.add(slot3, gridBagConstraints);

        slot4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slot4.setPreferredSize(new java.awt.Dimension(232, 94));
        slot4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                slotMouseReleased(evt);
            }
        });
        slot4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        griglia.add(slot4, gridBagConstraints);

        btnIndietro.setBackground(new java.awt.Color(255, 144, 183));
        btnIndietro.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        btnIndietro.setForeground(new java.awt.Color(255, 255, 255));
        btnIndietro.setText("Indietro");
        btnIndietro.setBorderPainted(false);
        btnIndietro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIndietro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIndietroActionPerformed(evt);
            }
        });

        btnConferma.setBackground(new java.awt.Color(255, 144, 183));
        btnConferma.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        btnConferma.setForeground(new java.awt.Color(255, 255, 255));
        btnConferma.setText("Conferma");
        btnConferma.setBorderPainted(false);
        btnConferma.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConferma.setEnabled(false);
        btnConferma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfermaActionPerformed(evt);
            }
        });

        btnElimina.setBackground(new java.awt.Color(255, 144, 183));
        btnElimina.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        btnElimina.setForeground(new java.awt.Color(255, 255, 255));
        btnElimina.setText("Elimina");
        btnElimina.setBorderPainted(false);
        btnElimina.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnElimina.setEnabled(false);
        btnElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sfondoLayout = new javax.swing.GroupLayout(sfondo);
        sfondo.setLayout(sfondoLayout);
        sfondoLayout.setHorizontalGroup(
            sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sfondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(sfondoLayout.createSequentialGroup()
                        .addComponent(btnElimina)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIndietro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConferma))
                    .addComponent(griglia, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        sfondoLayout.setVerticalGroup(
            sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sfondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(griglia, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConferma)
                    .addComponent(btnIndietro)
                    .addComponent(btnElimina))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sfondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sfondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIndietroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIndietroActionPerformed
        padre.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnIndietroActionPerformed

    private void btnConfermaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfermaActionPerformed
        switch (operazione) {
            case SALVATAGGIO ->
                salvaPartita();
            case CARICAMENTO ->
                caricaPartita();
        }

    }//GEN-LAST:event_btnConfermaActionPerformed

    private void salvaPartita() {
        String nomeFile = "slot" + (indiceSelezionato + 1) + ".sav";
        SlotPartita slot;
        try {
            FileOutputStream file = new FileOutputStream(nomeFile);
            BufferedOutputStream buffer = new BufferedOutputStream(file);
            ObjectOutputStream writer = new ObjectOutputStream(buffer);
            writer.writeObject(zoo.getDati());
            writer.close();
            slot = new SlotPartita(indiceSelezionato + 1, new File(nomeFile));
            slot.setZoo(zoo);
        } catch (IOException ex) {
            mostraErrore();
            return;
        }
        slots[indiceSelezionato] = slot;
        aggiornaUI();
        btnElimina.setEnabled(true);
        mostraConfermaOperazione();
    }

    private void caricaPartita() {
        SlotPartita slot = (SlotPartita) slots[indiceSelezionato];
        if (slot.getZoo() == null) {
            mostraErrore();
            return;
        }
        zoo = slot.getZoo();
        mostraConfermaOperazione();
        FinestraGioco finestraGioco;
        if (gioco != null) {
            finestraGioco = gioco;
            finestraGioco.setZoo(zoo);
        } else {
            finestraGioco = new FinestraGioco(zoo);
        }
        finestraGioco.setVisible(true);
        dispose();
    }

    private void mostraConfermaOperazione() {
        FinestraMessaggio conferma = new FinestraMessaggio(padre.getPadre(), true);
        String titolo = "";
        String operazionePartita = "";
        switch (operazione) {
            case SALVATAGGIO:
                titolo = "Salvataggio";
                operazionePartita = "salvata";
                break;
            case CARICAMENTO:
                titolo = "Caricamento";
                operazionePartita = "caricata";
                break;
        }
        conferma.setTitolo(titolo);
        conferma.setMessaggio("Partita " + operazionePartita + " con successo");
        conferma.setIcona("src/it/iis/tama/assets/Tamagotchi32.png");
        conferma.setVisible(true);
    }

    private void mostraErrore() {
        FinestraMessaggio errore = new FinestraMessaggio(padre.getPadre(), true);
        errore.setTitolo("Errore");
        String testoOperazione = switch (operazione) {
            case SALVATAGGIO ->
                "salvataggio";
            case CARICAMENTO ->
                "caricamento";
        };
        errore.setMessaggio("Si è verificato un errore durante il " + testoOperazione);
        errore.setVisible(true);

    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        padre.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void btnEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminaActionPerformed
        SlotPartita slot = (SlotPartita) slots[indiceSelezionato];
        slot.getFile().delete();
        slots[indiceSelezionato] = new SlotVuoto(indiceSelezionato + 1);
        btnElimina.setEnabled(false);
        aggiornaUI();
        mostraConfermaEliminazione();
    }//GEN-LAST:event_btnEliminaActionPerformed

    private void slotMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slotMouseReleased
        JPanel panel = (JPanel) evt.getSource();
        if (!panel.contains(evt.getPoint())) {
            return;
        }
        for (int i = 0; i < pannelli.length; i++) {
            if (pannelli[i] == panel) {
                pannelli[i].setBorder(BorderFactory.createLineBorder(Colore.ROSE_VIOLET, 2, true));
                indiceSelezionato = i;
            } else {
                pannelli[i].setBorder(null);
            }
        }
        Slot slot = slots[indiceSelezionato];
        boolean abilitazione = switch (operazione) {
            case SALVATAGGIO ->
                slot instanceof SlotVuoto;
            case CARICAMENTO ->
                slot instanceof SlotPartita;
        };
        btnConferma.setEnabled(abilitazione);
        btnElimina.setEnabled(slot instanceof SlotPartita);
    }//GEN-LAST:event_slotMouseReleased

    private void mostraConfermaEliminazione() {
        FinestraMessaggio conferma = new FinestraMessaggio(padre.getPadre(), true);
        conferma.setTitolo("Eliminazione");
        conferma.setMessaggio("Partita eliminata con successo");
        conferma.setIcona("src/it/iis/tama/assets/Tamagotchi32.png");
        conferma.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConferma;
    private javax.swing.JButton btnElimina;
    private javax.swing.JButton btnIndietro;
    private javax.swing.JPanel griglia;
    private javax.swing.JPanel sfondo;
    private javax.swing.JPanel slot1;
    private javax.swing.JPanel slot2;
    private javax.swing.JPanel slot3;
    private javax.swing.JPanel slot4;
    // End of variables declaration//GEN-END:variables

}
